import copy
import os
import random

import numpy as np

from ej2.visualize_letter import visualize_letter

patterns = {
    "A": [
        [-1, 1, 1, 1, -1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1]
    ],
    "B": [
        [1, 1, 1, 1, -1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, -1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, -1]
    ],
    "C": [
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, -1],
        [1, -1, -1, -1, -1],
        [1, -1, -1, -1, -1],
        [1, 1, 1, 1, 1]
    ],
    "D": [
        [1, 1, 1, 1, -1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, -1]
    ],
    "E": [
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, -1],
        [1, 1, 1, -1, -1],
        [1, -1, -1, -1, -1],
        [1, 1, 1, 1, 1]
    ],
    "F": [
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, -1],
        [1, 1, 1, -1, -1],
        [1, -1, -1, -1, -1],
        [1, -1, -1, -1, -1]
    ],
    "G": [
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, -1],
        [1, -1, 1, 1, 1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, 1]
    ],
    "H": [
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1]
    ],
    "I": [
        [1, 1, 1, 1, 1],
        [-1, -1, 1, -1, -1],
        [-1, -1, 1, -1, -1],
        [-1, -1, 1, -1, -1],
        [1, 1, 1, 1, 1]
    ],
    "J": [
        [1, 1, 1, 1, 1],
        [-1, -1, -1, 1, -1],
        [-1, -1, -1, 1, -1],
        [1, -1, -1, 1, -1],
        [1, 1, 1, -1, -1]
    ],
    "K": [
        [1, -1, -1, -1, 1],
        [1, -1, -1, 1, -1],
        [1, 1, 1, -1, -1],
        [1, -1, -1, 1, -1],
        [1, -1, -1, -1, 1]
    ],
    "L": [
        [1, -1, -1, -1, -1],
        [1, -1, -1, -1, -1],
        [1, -1, -1, -1, -1],
        [1, -1, -1, -1, -1],
        [1, 1, 1, 1, 1]
    ],
    "M": [
        [1, -1, -1, -1, 1],
        [1, 1, -1, 1, 1],
        [1, -1, 1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1]
    ],
    "N": [
        [1, -1, -1, -1, 1],
        [1, 1, -1, -1, 1],
        [1, -1, 1, -1, 1],
        [1, -1, -1, 1, 1],
        [1, -1, -1, -1, 1]
    ],
    "O": [
        [-1, 1, 1, 1, -1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [-1, 1, 1, 1, -1]
    ],
    "P": [
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, -1],
        [1, -1, -1, -1, -1]
    ],
    "Q": [
        [-1, 1, 1, 1, -1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, 1, -1],
        [-1, 1, 1, 1, 1]
    ],
    "R": [
        [1, 1, 1, 1, -1],
        [1, -1, -1, -1, 1],
        [1, 1, 1, 1, -1],
        [1, -1, -1, 1, -1],
        [1, -1, -1, -1, 1]
    ],
    "S": [
        [-1, 1, 1, 1, 1],
        [1, -1, -1, -1, -1],
        [-1, 1, 1, 1, -1],
        [-1, -1, -1, -1, 1],
        [1, 1, 1, 1, -1]
    ],
    "T": [
        [1, 1, 1, 1, 1],
        [-1, -1, 1, -1, -1],
        [-1, -1, 1, -1, -1],
        [-1, -1, 1, -1, -1],
        [-1, -1, 1, -1, -1]
    ],
    "U": [
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [-1, 1, 1, 1, -1]
    ],
    "V": [
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [-1, 1, -1, 1, -1],
        [-1, -1, 1, -1, -1]
    ],
    "W": [
        [1, -1, -1, -1, 1],
        [1, -1, -1, -1, 1],
        [1, -1, 1, -1, 1],
        [1, 1, -1, 1, 1],
        [1, -1, -1, -1, 1]
    ],
    "X": [
        [1, -1, -1, -1, 1],
        [-1, 1, -1, 1, -1],
        [-1, -1, 1, -1, -1],
        [-1, 1, -1, 1, -1],
        [1, -1, -1, -1, 1]
    ],
    "Y": [
        [1, -1, -1, -1, 1],
        [-1, 1, -1, 1, -1],
        [-1, -1, 1, -1, -1],
        [-1, -1, 1, -1, -1],
        [-1, -1, 1, -1, -1]
    ],
    "Z": [
        [1, 1, 1, 1, 1],
        [-1, -1, -1, 1, -1],
        [-1, -1, 1, -1, -1],
        [-1, 1, -1, -1, -1],
        [1, 1, 1, 1, 1]
    ]
}

def pattern_with_noise(letter, flips: int, seed = None):
    if seed is not None:
        random.seed(seed)
    pattern = copy.deepcopy(patterns[letter])

    positions = list(range(25))
    flip_positions = random.sample(positions, flips)

    for pos in flip_positions:
        row = pos // 5
        col = pos % 5
        pattern[row][col] = -pattern[row][col]

    return pattern


if __name__ == "__main__":
    patterns_dir = "letter_patterns"
    os.makedirs("letter_patterns", exist_ok=True)

    for letter, pattern in patterns.items():
        visualize_letter(pattern, f"{patterns_dir}/{letter}_pattern.jpg")

    # pattern = pattern_with_noise("C", 5, 42)
    # visualize_letter(pattern)